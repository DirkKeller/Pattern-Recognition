
"""
---
title: Denoising Diffusion Probabilistic Models (DDPM)
summary: >
  PyTorch implementation and tutorial of the paper
  Denoising Diffusion Probabilistic Models (DDPM).
---

(obtained from: https://github.com/labmlai/annotated_deep_learning_paper_implementations/blob/master/labml_nn/diffusion/ddpm/__init__.py)
"""

from typing import Tuple, Optional

import torch
import torch.nn.functional as F
import torch.utils.data
from torch import nn

from utils import gather


class DenoiseDiffusion:
    """
    ## Denoise Diffusion
    """


    def __init__(self, eps_model: nn.Module, n_steps: int, device: torch.device):
        """
        Initialize a DenoiseDiffusion object.

        Args:
        - eps_model: This is \epsilon_\theta(x_t, t). PyTorch module (with parameters theta) representing the denoising process, which is a function that maps the final latent state back to the observation space (e.g., the space of clean images).
        It takes the final latent state x_t and produces some output.
        - n_steps: t: the number of steps in the diffusion process.
        - device: the device (e.g., CPU or GPU) on which the model's parameters and data should be stored.
        """
        super().__init__()
        self.eps_model = eps_model

        # Create a linearly increasing variance schedule for the diffusion process.
        self.beta = torch.linspace(0.0001, 0.02, n_steps).to(device)

        # Compute the complementary values of beta.
        self.alpha = 1. - self.beta
        # Compute the cumulative product of alpha.
        self.alpha_bar = torch.cumprod(self.alpha, dim=0)
        # Store the number of steps in the diffusion process.
        self.n_steps = n_steps
        # Set the variance of the diffusion process to beta.
        self.sigma2 = self.beta


    def q_xt_x0(self, x0: torch.Tensor, t: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        Get the q(x_t|x_0) distribution. In other words, compute the distribution of the final latent state given the initial latent state and the current step in the diffusion process.

        The distribution is a Gaussian with mean equal to a weighted average of the initial latent state and the current latent state and variance equal to a fixed value (TODO it's not fixed value right? or is it??).
        The q(x_t|x_0) distribution is defined as:

        q(x_t|x_0) = ùí©(x_t; ‚àö(Œ±ÃÖ‚Çú ) * x_0, (1 - Œ±ÃÖ‚Çú ) * I)
        (in latex: q(x_t|x_0) &= \mathcal{N} \Big(x_t; \sqrt{\bar\alpha_t} x_0, (1-\bar\alpha_t) \mathbf{I} \Big) )

        Args:
        - x0: a tensor representing the initial latent state.
        - t: a tensor representing the current step in the diffusion process.

        Returns:
        A tuple containing the mean and variance of the distribution.

        """

        # Gather the value of alpha_bar for the current step, and then compute sqrt(Œ±ÃÖ‚Çú ) * x_0
        mean = gather(self.alpha_bar, t) ** 0.5 * x0
        # The variance is then: (1 - Œ±ÃÖ‚Çú ) * I
        var = 1 - gather(self.alpha_bar, t)
        return mean, var


    def q_sample(self, x0: torch.Tensor, t: torch.Tensor, eps: Optional[torch.Tensor] = None):
        """
        Sample from the distribution of the final latent state given the initial latent state and the current step in the diffusion process.
        The distribution is a Gaussian with mean equal to a weighted average of the initial latent state and the current latent state and variance equal to a fixed value.

        Args:
        - x0: a tensor representing the initial latent state.
        - t: a tensor representing the current step in the diffusion process.
        - eps: an optional tensor representing noise to be added to the sample. If not provided, noise will be generated by sampling from a standard normal distribution.

        Returns:
        A tensor representing a sample from the distribution.

        """
        # If no noise is provided, generate noise by sampling from a standard normal distribution (so from N(I,0)).
        if eps is None:
            eps = torch.randn_like(x0)

        # Get the distribution (so, $q(x_t|x_0)$) of the final latent state given the initial latent state and the current step in the diffusion process.
        mean, var = self.q_xt_x0(x0, t)
        # Sample from that distribution $q(x_t|x_0)$.
        return mean + (var ** 0.5) * eps




    def p_sample(self, xt: torch.Tensor, t: torch.Tensor):
        """
        Sample from the distribution defined by the denoising process. So, sample from p‚Çú(ùë•‚Çú‚Çã‚ÇÅ|ùë•‚Çú) as follows:
        p‚Çú(ùë•‚Çú‚Çã‚ÇÅ | ùë•‚Çú) = ùí©(ùë•‚Çú‚Çã‚ÇÅ; Œº‚Çú(ùë•‚Çú, t), œÉ¬≤‚Çúùêà)
        Œº‚Çú(ùë•‚Çú, t) = 1/‚àöŒ±‚Çú (ùë•‚Çú - Œµ‚Çú(ùë•‚Çú, t)Œ≤‚Çú/‚àö(1-Œ±ÃÑ‚Çú))

        Args:
        - xt: a tensor representing the final latent state.
        - t: a tensor representing the current step in the diffusion process.

        Returns:
        A tensor representing a sample from the distribution.
        """

        # Get the output of the denoising process, which is a function that maps the final latent state back to the observation space (e.g., the space of clean images).
        eps_theta = self.eps_model(xt, t)
        # Get the value of alpha_bar at the current step in the diffusion process.
        alpha_bar = gather(self.alpha_bar, t)
        # Get the value of Œ±‚Çú at the current step in the diffusion process.
        alpha = gather(self.alpha, t)
        # Calculate the mean of the distribution.
        mean = 1 / (alpha ** 0.5) * (xt - (1 - alpha) / (1 - alpha_bar) ** 0.5 * eps_theta)
        # Get the variance of the distribution at the current step in the diffusion process.
        var = gather(self.sigma2, t)

        # Sample from the distribution.
        eps = torch.randn(xt.shape, device=xt.device)
        return mean + (var ** 0.5) * eps

        """
        #### Sample from $\textcolor{lightgreen}{p_\theta}(x_{t-1}|x_t)$
        \begin{align}
        \textcolor{lightgreen}{p_\theta}(x_{t-1} | x_t) &= \mathcal{N}\big(x_{t-1};
        \textcolor{lightgreen}{\mu_\theta}(x_t, t), \sigma_t^2 \mathbf{I} \big) \\
        \textcolor{lightgreen}{\mu_\theta}(x_t, t)
          &= \frac{1}{\sqrt{\alpha_t}} \Big(x_t -
            \frac{\beta_t}{\sqrt{1-\bar\alpha_t}}\textcolor{lightgreen}{\epsilon_\theta}(x_t, t) \Big)
        \end{align}


        # $\textcolor{lightgreen}{\epsilon_\theta}(x_t, t)$
        eps_theta = self.eps_model(xt, t)
        # [gather](utils.html) $\bar\alpha_t$
        alpha_bar = gather(self.alpha_bar, t)
        # $\alpha_t$
        alpha = gather(self.alpha, t)
        # $\frac{\beta}{\sqrt{1-\bar\alpha_t}}$
        eps_coef = (1 - alpha) / (1 - alpha_bar) ** .5
        # $$\frac{1}{\sqrt{\alpha_t}} \Big(x_t -
        #      \frac{\beta_t}{\sqrt{1-\bar\alpha_t}}\textcolor{lightgreen}{\epsilon_\theta}(x_t, t) \Big)$$
        mean = 1 / (alpha ** 0.5) * (xt - eps_coef * eps_theta)
        # $\sigma^2$
        var = gather(self.sigma2, t)

        # $\epsilon \sim \mathcal{N}(\mathbf{0}, \mathbf{I})$
        eps = torch.randn(xt.shape, device=xt.device)
        # Sample
        return mean + (var ** .5) * eps
        """

    def loss(self, x0: torch.Tensor, noise: Optional[torch.Tensor] = None):
        """
        Calculate the loss for the given initial latent state. The loss is calculated as the expectation of the squared difference between noise Œµ and the output of a model Œµ‚Çú given input ‚àöŒ±ÃÑ‚Çúùë•‚ÇÄ + ‚àö1 - Œ±ÃÑ‚ÇúŒµ at time t.
        Simplified Loss: L_simple(Œ∏) = ùîº‚Çú,ùë•‚ÇÄ,Œµ[|| Œµ - Œµ‚Çú(ùë•‚ÇÄ‚àöŒ±ÃÑ‚Çú + Œµ‚àö(1-Œ±ÃÑ‚Çú), t) ||¬≤]

        Args:
        - x0: a tensor representing the initial latent state.
        - noise: a tensor representing noise to be used in sampling. If not provided, noise will be generated randomly from a normal distribution with mean 0 and variance 1.

        Returns:
        A tensor representing the loss.
        """

        # Get batch size
        batch_size = x0.shape[0]
        # Get random t for each sample in the batch
        t = torch.randint(0, self.n_steps, (batch_size,), device=x0.device, dtype=torch.long)

        # Generate noise if it was not provided
        if noise is None:
            # Generate noise from a normal distribution with mean 0 and variance 1
            noise = torch.randn_like(x0)

        # Sample x‚Çú for q(x‚Çú | x‚ÇÄ)
        xt = self.q_sample(x0, t, eps=noise)
        # Get Œµ‚Çú(x‚ÇÄ‚àöŒ±ÃÑ‚Çú  + Œµ‚àö1-Œ±ÃÑ‚Çú, t)
        eps_theta = self.eps_model(xt, t)

        # MSE loss
        return F.mse_loss(noise, eps_theta)
